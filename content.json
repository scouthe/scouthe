{"pages":[],"posts":[{"title":"markdown_learning","text":"abstractmarkdown learning recording 一级二级三级四级五级h1h2h3h4h5这是一级标题这是二级标题 这段文字高亮显示 点击跳转百度 图片比链接引用多一个感叹号 无序列表 *黄瓜*玉米*茄子 +黄瓜+玉米+茄子 -黄瓜-玉米-茄子 有序列表 1.黄瓜2.玉米3.茄子 段落一 小段一 段落二 小段二 段落一 区块标记一 区块二 三 段落二 区块标记二 这是斜体这是斜体 加粗加粗粗斜删除 下划线 脚注这是一个脚注示例 [^abc]。[^abc]: 这是脚注。 高级用法插入代码块print()函数 var x = 3 123$(document).ready(function () { alert('RUNOOB');}); 123 fun (x: Int, y: Int): Int { return x + y} 表头 条目 条目二 项目 项目一 项目二 注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。 #其他##特殊符号处理 \\用来插入特殊符号 /#\\ TestTest","link":"/2021/08/16/markdown_learning/"},{"title":"hexo_auto","text":"Abstracthexo blog auto new blog and publish blog hexo auto new blog using hexo scaffold for example new a .bat file and put this code code1234567@echo off set /p a= input title:echo title:%a%call hexo new post &quot;%a%&quot;cd .\\source\\_posts\\Start %a%.mdpause hexo auto pushnew a .bat file and put this code code12call hexo d -gpause 参考文章:参考链接","link":"/2021/08/16/hexo-auto/"},{"title":"VPN-v2ray establish on your own VPS","text":"abstractThis artical will give you an simple way to bulid your own VPN preparation A domain name A VPS An acount of the Cloudflare with the free plan is enough A software XSHELL to connect your VPS 1.Connect your server by XSHELL 2.Log in the clondflare and DNS your domain name to your server ipAfter DNS, don’t light the yellow cloudMake sure your domain name’s DNS server is under the cloudflare. 3.run command1bash &lt;(curl -s -L https://git.io/v2ray.sh) choose 1 to install choose 4 to select transport protocols entere your domain name(second-level domain also useful) then y TLS “y” the rest just press enter wait for the install finish Back to cloudflare to light the yellow cloud 4.get the vmess linkrun v2ray linkcopy the link to add in the v2rayN 5.manager the v2rayv2ray infov2ray configv2ray link generate V2Ray linkv2ray infolink generate V2Ray info linkv2ray qr v2ray generate QR codev2ray ss edit Shadowsocks infov2ray ssinfo check the Shadowsocks infov2ray ssqr generate Shadowsocks QR codev2ray statusv2ray start v2ray stop v2ray restart v2ray logv2ray update v2ray update.sh v2ray uninstall refer link","link":"/2021/08/21/VPN-v2ray-establish-on-your-own-VPS/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/08/22/hello-world/"},{"title":"Playwright,微软浏览器自动化教程（二）","text":"Playwright,微软浏览器自动化教程（二）核心概念，建议结合第一节的内容具体理解 1、Browser这是一个浏览器实例，脚本运行需要首先打开浏览器实例 12# playwright.brwoser_type.action(**kwargs)可以理解为指定浏览器内核browser = playwright.chromium.launch(channel=&quot;chrome&quot;,headless=False) 123456# launch是最常用的一个函数，他有大量的参数,这里介绍常用的的headless 是否显示GUI，默认是TRUE不显示channel 指定浏览器版本，&quot;chrome&quot;, &quot;chrome-beta&quot;, &quot;chrome-dev&quot;, &quot;chrome-canary&quot;,proxy 浏览器代理设置timeout 等待超时时间，默认30000ms（30s）slow_mo 减慢操作速度，浮点型，一边可以看清楚操作 顺便说一下，playwright的所有操作都有自动等待的功能，时间都是30s 2、Browser contexts这个是独立的浏览器，隐身对话，意思是每一个Beowser contexts都是独立的，互相之间没有关系，等于说全都是新装的浏览器。 1234# 根据浏览器内核创建浏览器context = browser.new_context(accept_downloads=False)# 创建新页面page = context.new_page() 2.1、browser.new_context1234567# browser.new_context的参数包括所有跟浏览器设置相关的# 可以理解为根据浏览器创建一个新的浏览器accept_downloads 是否下载所有附件，默认False不下载geolocation 设定经纬度user_agent 设定user agentviewport 设定页面大小，规格，例如1280*720offline 离线模式加载 2.2、context123456# context就是浏览器层面的操作context.new_page() 返回一个新页面context.pages 返回所有打开的页面[list]context.add_cookies([cookie_object1, cookie_object2]) 添加cookiecontext.cookies() 返回cookiecontext.wait_for_event(event, **kwargs) 等待event完成 3、Pages and frames一个 Browser contexts 有多个pages，一个 page 是一个单独的tab，或者弹出窗口。用于导航到url ，或者与页面交互，比如点击，输入文字等。一个 page 有多个 Frame （框架），框架内的操作无法通过page.**操作，只能通过page.Frame.func（）操作，但是通常在录制模式下，他会自动识别是否是框架内的操作，如果不懂怎么定位框架，那么可以使用录制模式来找。 3.1、Pages大部分操作都是在page层面的，所以page有最多的函数 12345678910111213from playwright.sync_api import sync_playwright# 这是一个创建页面，定位到指定链接，并截屏保存的例子def run(playwright): webkit = playwright.webkit browser = webkit.launch() context = browser.new_context() page = context.new_page() page.goto(&quot;https://example.com&quot;) page.screenshot(path=&quot;screenshot.png&quot;) browser.close()with sync_playwright() as playwright: run(playwright) 常用的函数有，一般看名字就知道是干嘛的 1234567891011121314151617181920212223242526page.click(selector, **kwargs)page.content() # 获取页面的htmlpage.screenshot(**kwargs)page.goto(url, **kwargs)page.pdf(**kwargs)page.reload(**kwargs)page.wait_for_timeout(timeout)page.get_attribute(selector, name, **kwargs)# page的expect_**函数需要注意# 这个类型的函数一般都伴随这with使用# 下面这个例子就是点击按钮后，改变了页面框架with page.expect_event(&quot;framenavigated&quot;) as event_info: page.click(&quot;button&quot;)frame = event_info.value#这样的还有很多，比如，大都用在交互的对象改变的情况下page.expect_file_chooser(**kwargs)page.expect_navigation(**kwargs)page.expect_popup(**kwargs)# 个人推荐注意这几个is的方法，在等待页面的时候很有用page.is_disabled/(selector, **kwargs)is_editable，is_enabled，is_hidden，is_visible# 还有一个特殊的方法page.locator(selector) # 定位页面元素，返回的是locator对象 3.2、Frameframe的操作大部分跟page一样，只不过frame是page下一级的，可以理解为在page里嵌套的一个小页面。但是还是有一点不一样。page里分为主框架和子框架，这里有一个框架树的例子,大家可以运行下试试。 1234567891011121314151617from playwright.sync_api import sync_playwrightdef run(playwright): firefox = playwright.firefox browser = firefox.launch() page = browser.new_page() page.goto(&quot;https://www.theverge.com&quot;) dump_frame_tree(page.main_frame, &quot;&quot;) browser.close()def dump_frame_tree(frame, indent): print(indent + frame.name + '@' + frame.url) for child in frame.child_frames: dump_frame_tree(child, indent + &quot; &quot;)with sync_playwright() as playwright: run(playwright) 其方法大部分都与page一样，不在赘述，注意的是page.frame(**kwargs)，这个可以用来选择Frame，并返回Frame对象，所以对Frame的操作有一下两种方法。 123456# 直接定位Frame操作page.frame(name=&quot;frame-name&quot;).click('text=hello')#返回Frame对象操作frame = page.frame(name=&quot;frame-name&quot;)frame.click('text=hello') 4、SelectorsPlaywright可以通过css,XPath,HTML等选择元素，像id,data-test-id，或者像上面演示的，通过text内容。这里有一些例子 12345678910111213# Using data-test-id= selector enginepage.click('data-test-id=foo')# CSS and XPath selector engines are automatically detectedpage.click('div')page.click('//html/body/div')# Find node by text substringpage.click('text=Hello w')# 通过 &gt;&gt; 链接相同或不同的选择器# Click an element with text 'Sign Up' inside of a #free-month-promo.page.click('#free-month-promo &gt;&gt; text=Sign Up') 我推荐使用浏览器的开发者模式来寻找选择器： 5、Auto-waiting所有的操作都会等待元素可见，或者可操作之后才会进行，也就是自带等待时间，但是如果要自己加等待的话不推荐使用time.sleep(5)，而是用page.wait_for_timeout(5000)。这里也可以使用page的wait操作: 123456page.wait_for_event(event, **kwargs)page.wait_for_function(expression, **kwargs)page.wait_for_load_state(**kwargs)page.wait_for_selector(selector, **kwargs)page.wait_for_timeout(timeout)page.wait_for_url(url, **kwargs) 6、Evaluation Argument像 page.evaluate(expression, **kwargs) 这样的剧作家评估方法采用单个可选参数。 此参数可以是 Serializable 值和 JSHandle 或 ElementHandle 实例的混合。 句柄会自动转换为它们所代表的值。 123456789101112131415161718192021222324252627282930313233343536373839# A primitive value.page.evaluate('num =&gt; num', 42)# An array.page.evaluate('array =&gt; array.length', [1, 2, 3])# An object.page.evaluate('object =&gt; object.foo', { 'foo': 'bar' })# A single handle.button = page.query_selector('button')page.evaluate('button =&gt; button.textContent', button)# Alternative notation using elementHandle.evaluate.button.evaluate('(button, from) =&gt; button.textContent.substring(from)', 5)# Object with multiple handles.button1 = page.query_selector('.button1')button2 = page.query_selector('.button2')page.evaluate(&quot;&quot;&quot;o =&gt; o.button1.textContent + o.button2.textContent&quot;&quot;&quot;, { 'button1': button1, 'button2': button2 })# Object destructuring works. Note that property names must match# between the destructured object and the argument.# Also note the required parenthesis.page.evaluate(&quot;&quot;&quot; ({ button1, button2 }) =&gt; button1.textContent + button2.textContent&quot;&quot;&quot;, { 'button1': button1, 'button2': button2 })# Array works as well. Arbitrary names can be used for destructuring.# Note the required parenthesis.page.evaluate(&quot;&quot;&quot; ([b1, b2]) =&gt; b1.textContent + b2.textContent&quot;&quot;&quot;, [button1, button2])# Any non-cyclic mix of serializables and handles works.page.evaluate(&quot;&quot;&quot; x =&gt; x.button1.textContent + x.list[0].textContent + String(x.foo)&quot;&quot;&quot;, { 'button1': button1, 'list': [button2], 'foo': None }) 参考文章:参考链接","link":"/2021/09/01/Playwright-%E5%BE%AE%E8%BD%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"},{"title":"leecode","text":"摘要首页显示摘要内容（替换成自己的） 正文内容（替换成自己的） 参考文章:参考链接","link":"/2021/08/22/leecode/"},{"title":"Playwright,微软浏览器自动化教程（一）","text":"Playwright,微软浏览器自动化教程（一）快速开始 1、简介Playwright 支持大部分的语言，Node.js, python, Java, .Net, 并且支持谷歌，火狐等浏览器，跨平台，并且支持移动端的模拟，可以很方便的录制脚本。并且可以使用同步或异步的打开方式。我们先从同步开始。 2、快速开始2.1、安装PIP123pip install --upgrade pippip install playwrightplaywright install 2.2、录制脚本推荐新手首先使用提供的录制功能，自己录制一个脚本，然后对着生成的代码，这样会对这个的使用流程有一个大概的理解。使用下面的命令可以快速录制一个脚本。 1playwright codegen wikipedia.org 123456-o &lt;file name&gt; 保存的文件名--target &lt;language&gt; 生成的脚本语言，像javascript, python(默认) -b 指定浏览器 chromium（默认）, firefox--channel &lt;channel&gt; 指定浏览器版本&quot;chrome&quot;,&quot;chrome-beta&quot;, &quot;msedge-dev&quot;--device &lt;deviceName&gt; 模拟设备，像 &quot;iPhone 11&quot; -h, --help 更多命令，请看帮助 3、脚本详解我们先从一个简单录制的脚本讲起，在生成脚本的同时，还自动生成了注释，可以说是非常方便，根据注释也可以帮助我们理解代码 123456789101112131415161718192021222324252627282930from playwright.sync_api import Playwright, sync_playwrightdef run(playwright: Playwright) -&gt; None: # 首先实例化一个浏览器对象 browser = playwright.chromium.launch(headless=False) # 打开一个浏览器会话 context = browser.new_context() # 打开一个新页面 page = context.new_page() # Go to https://www.google.com.hk/?gws_rd=ssl page.goto(&quot;https://www.google.com.hk/?gws_rd=ssl&quot;) # Click [aria-label=&quot;搜索&quot;] page.click(&quot;[aria-label=\\&quot;搜索\\&quot;]&quot;) # Fill [aria-label=&quot;搜索&quot;] page.fill(&quot;[aria-label=\\&quot;搜索\\&quot;]&quot;, &quot;playwright&quot;) # Press Enter # 这里是一个页面导航功能 # 点击元素可以出发导航，要求使用 page.expect_navigation(**kwargs) # 这里点击了搜索按钮，这样页面信息可以获取浏览器新的内容 with page.expect_navigation(): page.press(&quot;[aria-label=\\&quot;搜索\\&quot;]&quot;, &quot;Enter&quot;) # 这里由于打开了新的页面，所以需要使用page.expect_popup()来获取新的页面，并且用as来操作新的页面 with page.expect_popup() as popup_info: page.click(&quot;text=Playwright: Fast and reliable end-to-end testing for modern ...&quot;) # 这里将新页面命名为page1，并将新的页面信息传给page1 page1 = popup_info.value # 关闭浏览器会话，和浏览器 context.close() browser.close()with sync_playwright() as playwright: run(playwright) 4、总结目前来看，这个录制功能是比较方便好用的，可以帮助我们快速理解代码但是缺点也很明显，这个录制功能无法进行循环操作，仅这一条就说明无法靠录制解决所有的自动化任务，除非你选择在外层进行循环，但那样会降低效率，并且从上面代码上来看，其自动定位的元素都是text，无法从网页根本上定位元素。下一节，我将介绍playwright的核心概念，来帮助理解整个的工作流程参考文章:playwright for python","link":"/2021/09/01/Playwright-%E5%BE%AE%E8%BD%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"}],"tags":[{"name":"auto","slug":"auto","link":"/tags/auto/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"vpn","slug":"vpn","link":"/tags/vpn/"},{"name":"playwright","slug":"playwright","link":"/tags/playwright/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"automatic","slug":"automatic","link":"/tags/automatic/"}],"categories":[{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"markdown","slug":"markdown","link":"/categories/markdown/"},{"name":"tutorial","slug":"tutorial","link":"/categories/tutorial/"},{"name":"learning recording","slug":"learning-recording","link":"/categories/learning-recording/"},{"name":"learning recording","slug":"markdown/learning-recording","link":"/categories/markdown/learning-recording/"},{"name":"playwright","slug":"learning-recording/playwright","link":"/categories/learning-recording/playwright/"},{"name":"python","slug":"learning-recording/playwright/python","link":"/categories/learning-recording/playwright/python/"}]}